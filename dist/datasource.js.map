{"version":3,"sources":["../src/datasource.js"],"names":["_","aggregations","dimensionKeysQueryRegex","namespacesQueryRegex","resourcegroupsQueryRegex","metricsQueryRegex","regionsQueryRegex","compartmentsQueryRegex","dimensionValuesQueryRegex","removeQuotes","AUTO","retryOrThrow","SELECT_PLACEHOLDERS","resolveAutoWinRes","DEFAULT_RESOURCE_GROUP","OCIDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","tenancyOCID","jsonData","defaultRegion","environment","q","compartmentsCache","regionsCache","getRegions","getCompartments","options","query","buildQueryParameters","targets","length","when","data","doRequest","then","res","forEach","result","results","r","series","push","target","s","datapoints","points","tables","t","refId","queryType","region","compartment","datasourceId","range","timeRange","response","status","message","title","catch","templateMetricQuery","REGION","getVariableValue","COMPARTMENT","namespace","NAMESPACE","resourcegroup","RESOURCEGROUP","isEmpty","compartmentId","getCompartmentId","mapToTextValue","queries","filter","hide","scopedVars","metric","METRIC","dimensions","dim","key","DIMENSION_KEY","value","DIMENSION_VALUE","splitMultiValueDimensionsIntoQuieries","numberOfDaysDiff","to","diff","from","replace","window","resolution","WINDOW","resolvedWinResolObj","reduce","d","operator","indexOf","dimension","join","aggregation","concat","multipleValueDims","startsWith","endsWith","values","slice","split","Object","keys","splitDimensions","dims","multiDims","prev","next","firstDimKey","firstDimValues","v","newDim","cloneDeep","i","j","newDimsArray","newQueries","newQuery","varString","regionQuery","match","Error","err","compartmentQuery","compartments","map","text","c","namespaceQuery","getNamespaces","resourcegroupQuery","getResourceGroups","metricQuery","metricFindQuery","dimensionsQuery","getDimensionKeys","dimensionOptionsQuery","dimensionKey","getDimensionValues","items","compartmentFound","find","metrics","dimensionsMap","m","undefined","finally","newResult","getDimensions","dimCache","item","dimKey","_this","datasourceRequest","method","valueOf","toString","searchField","table","rows","row","isObject","regex","includeCustom","vars","variables","regexVars","custom","uniqueRegexVarsMap","Map","set","varObj","Array","varDescriptors","getVariableDescriptors","varName","varNames","getVariables"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n** Copyright © 2019 Oracle and/or its affiliates. All rights reserved.\n** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n*/\nimport _ from 'lodash'\nimport {\n  aggregations,\n  dimensionKeysQueryRegex,\n  namespacesQueryRegex,\n  resourcegroupsQueryRegex,\n  metricsQueryRegex,\n  regionsQueryRegex,\n  compartmentsQueryRegex,\n  dimensionValuesQueryRegex,\n  removeQuotes,\n  AUTO\n} from './constants'\nimport retryOrThrow from './util/retry'\nimport { SELECT_PLACEHOLDERS } from './query_ctrl'\nimport { resolveAutoWinRes } from './util/utilFunctions'\nconst DEFAULT_RESOURCE_GROUP = 'NoResourceGroup'\n\nexport default class OCIDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type\n    this.url = instanceSettings.url\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.tenancyOCID = instanceSettings.jsonData.tenancyOCID\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion\n    this.environment = instanceSettings.jsonData.environment\n    this.q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n    this.timeSrv = timeSrv\n\n    this.compartmentsCache = [];\n    this.regionsCache = [];\n\n    this.getRegions();\n    this.getCompartments();\n  }\n\n  /**\n   * Each Grafana Data source should contain the following functions:\n   *  - query(options) //used by panels to get data\n   *  - testDatasource() //used by data source configuration page to make sure the connection is working\n   *  - annotationQuery(options) // used by dashboards to get annotations\n   *  - metricFindQuery(options) // used by query editor to get metric suggestions.\n   * More information: https://grafana.com/docs/plugins/developing/datasources/\n  */\n\n  /**\n   * Required method\n   * Used by panels to get data\n   */\n  async query(options) {\n    var query = await this.buildQueryParameters(options);\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest(query).then(result => {\n      var res = []\n      _.forEach(result.data.results, r => {\n        _.forEach(r.series, s => {\n          res.push({ target: s.name, datapoints: s.points })\n        })\n        _.forEach(r.tables, t => {\n          t.type = 'table'\n          t.refId = r.refId\n          res.push(t)\n        })\n      })\n\n      result.data = res;\n      return result;\n    })\n  }\n\n  /**\n   * Required method\n   * Used by data source configuration page to make sure the connection is working\n   */\n  testDatasource() {\n    return this.doRequest({\n      targets: [{\n        queryType: 'test',\n        region: this.defaultRegion,\n        tenancyOCID: this.tenancyOCID,\n        compartment: '',\n        environment: this.environment,\n        datasourceId: this.id\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((response) => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' }\n      }\n    }).catch(() => {\n      return { status: 'error', message: 'Data source is not working', title: 'Failure' }\n    })\n  }\n\n  /**\n   * Required method\n   * Used by query editor to get metric suggestions\n   */\n  async metricFindQuery(target) {\n    if (typeof (target) === 'string') {\n      // used in template editor for creating variables\n      return this.templateMetricQuery(target);\n    }\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    const namespace = target.namespace === SELECT_PLACEHOLDERS.NAMESPACE ? '' : this.getVariableValue(target.namespace);\n    const resourcegroup = target.resourcegroup === SELECT_PLACEHOLDERS.RESOURCEGROUP ? DEFAULT_RESOURCE_GROUP : this.getVariableValue(target.resourcegroup);\n\n    if (_.isEmpty(compartment) || _.isEmpty(namespace)) {\n      return this.q.when([]);\n    }\n\n    const compartmentId = await this.getCompartmentId(compartment);\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'search',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId,\n        namespace: namespace,\n        resourcegroup: resourcegroup\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((res) => {\n      return this.mapToTextValue(res, 'search')\n    })\n  }\n\n  /**\n   * Build and validate query parameters.\n   */\n  async buildQueryParameters (options) {\n    let queries = options.targets\n      .filter(t => !t.hide)\n      .filter(t => !_.isEmpty(this.getVariableValue(t.compartment, options.scopedVars)) && t.compartment !== SELECT_PLACEHOLDERS.COMPARTMENT)\n      .filter(t => !_.isEmpty(this.getVariableValue(t.namespace, options.scopedVars)) && t.namespace !== SELECT_PLACEHOLDERS.NAMESPACE)\n      .filter(t => !_.isEmpty(this.getVariableValue(t.resourcegroup, options.scopedVars)))\n      .filter(t => !_.isEmpty(this.getVariableValue(t.metric, options.scopedVars)) && t.metric !== SELECT_PLACEHOLDERS.METRIC || !_.isEmpty(this.getVariableValue(t.target)));\n\n    queries.forEach(t => {\n      t.dimensions = (t.dimensions || [])\n        .filter(dim => !_.isEmpty(dim.key) && dim.key !== SELECT_PLACEHOLDERS.DIMENSION_KEY)\n        .filter(dim => !_.isEmpty(dim.value) && dim.value !== SELECT_PLACEHOLDERS.DIMENSION_VALUE);\n\n      t.resourcegroup = t.resourcegroup === SELECT_PLACEHOLDERS.RESOURCEGROUP ? DEFAULT_RESOURCE_GROUP : t.resourcegroup;\n    });\n\n    // we support multiselect for dimension values, so we need to parse 1 query into multiple queries\n    queries = this.splitMultiValueDimensionsIntoQuieries(queries, options);\n\n    const results = [];\n    for (let t of queries) {\n      const region = t.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(t.region, options.scopedVars);\n      let query = this.getVariableValue(t.target, options.scopedVars);\n      const numberOfDaysDiff = this.timeSrv.timeRange().to.diff(this.timeSrv.timeRange().from, 'days')\n      // The following replaces 'auto' in window portion of the query and replaces it with an appropriate value.\n      // If there is a functionality to access the window variable instead of matching [auto] in the query, it will be\n      // better\n      if (query) query = query.replace('[auto]', `[${resolveAutoWinRes(AUTO,'',numberOfDaysDiff).window}]`)\n      let resolution = this.getVariableValue(t.resolution, options.scopedVars)\n      let window = t.window === SELECT_PLACEHOLDERS.WINDOW ? '' : this.getVariableValue(t.window,options.scopedVars)\n      // p.s : timeSrv.timeRange() results in a moment object\n      const resolvedWinResolObj = resolveAutoWinRes(window, resolution, numberOfDaysDiff)\n      window = resolvedWinResolObj.window\n      resolution = resolvedWinResolObj.resolution\n      if (_.isEmpty(query)) {\n        // construct query\n        const dimensions = (t.dimensions || []).reduce((result, dim) => {\n          const d = `${this.getVariableValue(dim.key, options.scopedVars)} ${dim.operator} \"${this.getVariableValue(dim.value, options.scopedVars)}\"`;\n          if (result.indexOf(d) < 0) {\n            result.push(d);\n          }\n          return result\n        }, [])\n        const dimension = _.isEmpty(dimensions) ? '' : `{${dimensions.join(',')}}`\n        query = `${this.getVariableValue(t.metric, options.scopedVars)}[${window}]${dimension}.${t.aggregation}`\n      }\n\n      const compartmentId = await this.getCompartmentId(this.getVariableValue(t.compartment, options.scopedVars));\n      const result = {\n        resolution,\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'query',\n        refId: t.refId,\n        hide: t.hide,\n        type: t.type || 'timeserie',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId,\n        namespace: this.getVariableValue(t.namespace, options.scopedVars),\n        resourcegroup: this.getVariableValue(t.resourcegroup, options.scopedVars),\n        query: query\n      }\n      results.push(result);\n    };\n\n    options.targets = results;\n\n    return options;\n  }\n\n  /**\n   * Splits queries with multi valued dimensions into several quiries.\n   * Example:\n   * \"DeliverySucceedEvents[1m]{resourceDisplayName = [\"ResouceName_1\",\"ResouceName_1\"], eventType = [\"Create\",\"Delete\"]}.mean()\" ->\n   *  [\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_1\", eventType = \"Create\"}.mean()\",\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_2\", eventType = \"Create\"}.mean()\",\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_1\", eventType = \"Delete\"}.mean()\",\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_2\", eventType = \"Delete\"}.mean()\",\n   *  ]\n   */\n  splitMultiValueDimensionsIntoQuieries(queries, options) {\n    return queries.reduce((data, t) => {\n\n      if (_.isEmpty(t.dimensions) || !_.isEmpty(t.target)) {\n        // nothing to split or dimensions won't be used, query is set manually\n        return data.concat(t);\n      }\n\n      // create a map key : [values] for multiple values\n      const multipleValueDims = t.dimensions.reduce((data, dim) => {\n        const key = dim.key;\n        const value = this.getVariableValue(dim.value, options.scopedVars);\n        if (value.startsWith(\"{\") && value.endsWith(\"}\")) {\n          const values = value.slice(1, value.length - 1).split(',') || [];\n          data[key] = (data[key] || []).concat(values);\n        }\n        return data;\n      }, {});\n\n      if (_.isEmpty(Object.keys(multipleValueDims))) {\n        // no multiple values used, only single values\n        return data.concat(t);\n      }\n\n      const splitDimensions = (dims, multiDims) => {\n        let prev = [];\n        let next = [];\n\n        const firstDimKey = dims[0].key;\n        const firstDimValues = multiDims[firstDimKey] || [dims[0].value];\n        for (let v of firstDimValues) {\n          const newDim = _.cloneDeep(dims[0]);\n          newDim.value = v;\n          prev.push([newDim]);\n        }\n\n        for (let i = 1; i < dims.length; i++) {\n          const values = multiDims[dims[i].key] || [dims[i].value];\n          for (let v of values) {\n            for (let j = 0; j < prev.length; j++) {\n              if (next.length >= 20) {\n                // this algorithm of collecting multi valued dimensions is computantionally VERY expensive\n                // set the upper limit for quiries number\n                return next;\n              }\n              const newDim = _.cloneDeep(dims[i]);\n              newDim.value = v;\n              next.push(prev[j].concat(newDim));\n            }\n          }\n          prev = next;\n          next = [];\n        }\n\n        return prev;\n      }\n\n      const newDimsArray = splitDimensions(t.dimensions, multipleValueDims);\n\n      const newQueries = [];\n      for (let i = 0; i < newDimsArray.length; i++) {\n        const dims = newDimsArray[i];\n        const newQuery = _.cloneDeep(t);\n        newQuery.dimensions = dims;\n        if (i !== 0) {\n          newQuery.refId = `${newQuery.refId}${i}`;\n        }\n        newQueries.push(newQuery);\n      }\n      return data.concat(newQueries);\n    }, []);\n  }\n\n  // **************************** Template variable helpers ****************************\n\n  /**\n   * Matches the regex from creating template variables and returns options for the corresponding variable.\n   * Example:\n   * template variable with the query \"regions()\" will be matched with the regionsQueryRegex and list of available regions will be returned.\n   */\n  templateMetricQuery(varString) {\n\n    let regionQuery = varString.match(regionsQueryRegex)\n    if (regionQuery) {\n      return this.getRegions().catch(err => { throw new Error('Unable to get regions: ' + err) })\n    }\n\n    let compartmentQuery = varString.match(compartmentsQueryRegex)\n    if (compartmentQuery) {\n      return this.getCompartments().then(compartments => {\n        return compartments.map(c => ({ text: c.text, value: c.text }));\n      }).catch(err => { throw new Error('Unable to get compartments: ' + err) })\n    }\n\n    let namespaceQuery = varString.match(namespacesQueryRegex)\n    if (namespaceQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(namespaceQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(namespaceQuery[2]))\n      }\n      return this.getNamespaces(target).catch(err => { throw new Error('Unable to get namespaces: ' + err) })\n    }\n\n    let resourcegroupQuery = varString.match(resourcegroupsQueryRegex)\n    if (resourcegroupQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(resourcegroupQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(resourcegroupQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(resourcegroupQuery[3]))\n      }\n      return this.getResourceGroups(target).catch(err => { throw new Error('Unable to get resourcegroups: ' + err) })\n    }\n\n    let metricQuery = varString.match(metricsQueryRegex)\n    if (metricQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(metricQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(metricQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(metricQuery[3])),\n        resourcegroup: removeQuotes(this.getVariableValue(metricQuery[4]))\n      }\n      return this.metricFindQuery(target).catch(err => { throw new Error('Unable to get metrics: ' + err) })\n    }\n\n    let dimensionsQuery = varString.match(dimensionKeysQueryRegex)\n    if (dimensionsQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(dimensionsQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(dimensionsQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(dimensionsQuery[3])),\n        metric: removeQuotes(this.getVariableValue(dimensionsQuery[4])),\n        resourcegroup: removeQuotes(this.getVariableValue(dimensionsQuery[5]))\n      }\n      return this.getDimensionKeys(target).catch(err => { throw new Error('Unable to get dimensions: ' + err) })\n    }\n\n    let dimensionOptionsQuery = varString.match(dimensionValuesQueryRegex)\n    if (dimensionOptionsQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(dimensionOptionsQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(dimensionOptionsQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(dimensionOptionsQuery[3])),\n        metric: removeQuotes(this.getVariableValue(dimensionOptionsQuery[4])),\n        resourcegroup: removeQuotes(this.getVariableValue(dimensionOptionsQuery[6]))\n      }\n      const dimensionKey = removeQuotes(this.getVariableValue(dimensionOptionsQuery[5]));\n      return this.getDimensionValues(target, dimensionKey).catch(err => { throw new Error('Unable to get dimension options: ' + err) })\n    }\n\n    throw new Error('Unable to parse templating string');\n  }\n\n  getRegions() {\n    if (this.regionsCache && this.regionsCache.length > 0) {\n      return this.q.when(this.regionsCache);\n    }\n\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'regions'\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      this.regionsCache = this.mapToTextValue(items, 'regions');\n      return this.regionsCache;\n    });\n  }\n\n  getCompartments() {\n    if (this.compartmentsCache && this.compartmentsCache.length > 0) {\n      return this.q.when(this.compartmentsCache);\n    }\n\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'compartments',\n        region: this.defaultRegion // compartments are registered for the all regions, so no difference which region to use here\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      this.compartmentsCache = this.mapToTextValue(items, 'compartments');\n      return this.compartmentsCache;\n    });\n  }\n\n  getCompartmentId(compartment) {\n    return this.getCompartments().then(compartments => {\n      const compartmentFound = compartments.find(c => c.text === compartment || c.value === compartment);\n      return compartmentFound ? compartmentFound.value : compartment;\n    });\n  }\n\n  async getNamespaces(target) {\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    if (_.isEmpty(compartment)) {\n      return this.q.when([]);\n    }\n\n    const compartmentId = await this.getCompartmentId(compartment);\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'namespaces',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      return this.mapToTextValue(items, 'namespaces');\n    });\n  }\n\n  async getResourceGroups(target) {\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    const namespace = target.namespace === SELECT_PLACEHOLDERS.NAMESPACE ? '' : this.getVariableValue(target.namespace);\n    if (_.isEmpty(compartment)) {\n      return this.q.when([]);\n    }\n\n    const compartmentId = await this.getCompartmentId(compartment);\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'resourcegroups',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId,\n        namespace: namespace\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      return this.mapToTextValue(items, 'resourcegroups');\n    });\n  }\n\n  async getDimensions(target) {\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    const namespace = target.namespace === SELECT_PLACEHOLDERS.NAMESPACE ? '' : this.getVariableValue(target.namespace);\n    const resourcegroup = target.resourcegroup === SELECT_PLACEHOLDERS.RESOURCEGROUP ? DEFAULT_RESOURCE_GROUP : this.getVariableValue(target.resourcegroup);\n    const metric = target.metric === SELECT_PLACEHOLDERS.METRIC ? '' : this.getVariableValue(target.metric);\n    const metrics = metric.startsWith(\"{\") && metric.endsWith(\"}\") ? metric.slice(1, metric.length - 1).split(',') : [metric];\n\n    if (_.isEmpty(compartment) || _.isEmpty(namespace) || _.isEmpty(metrics)) {\n      return this.q.when([]);\n    }\n\n    const dimensionsMap = {};\n    for (let m of metrics) {\n      if (dimensionsMap[m] !== undefined) {\n        continue;\n      }\n      dimensionsMap[m] = null;\n\n      const compartmentId = await this.getCompartmentId(compartment);\n      await this.doRequest({\n        targets: [{\n          environment: this.environment,\n          datasourceId: this.id,\n          tenancyOCID: this.tenancyOCID,\n          queryType: 'dimensions',\n          region: _.isEmpty(region) ? this.defaultRegion : region,\n          compartment: compartmentId,\n          namespace: namespace,\n          resourcegroup: resourcegroup,\n          metric: m\n        }],\n        range: this.timeSrv.timeRange()\n      }).then(result => {\n        const items = this.mapToTextValue(result, 'dimensions');\n        dimensionsMap[m] = [].concat(items);\n      }).finally(() => {\n        if (!dimensionsMap[m]) {\n          dimensionsMap[m] = [];\n        }\n      });\n    }\n\n    let result = [];\n    Object.values(dimensionsMap).forEach(dims => {\n      if (_.isEmpty(result)) {\n        result = dims;\n      } else {\n        const newResult = [];\n        dims.forEach(dim => {\n          if (!!result.find(d => d.value === dim.value) && !newResult.find(d => d.value === dim.value)) {\n            newResult.push(dim);\n          }\n        });\n        result = newResult;\n      }\n    })\n\n    return result;\n  }\n\n  getDimensionKeys(target) {\n    return this.getDimensions(target).then(dims => {\n      const dimCache = dims.reduce((data, item) => {\n        const values = item.value.split('=') || [];\n        const key = values[0] || item.value;\n        const value = values[1];\n\n        if (!data[key]) {\n          data[key] = []\n        }\n        data[key].push(value);\n        return data;\n      }, {});\n      return Object.keys(dimCache);\n    }).then(items => {\n      return items.map(item => ({ text: item, value: item }))\n    });\n  }\n\n  getDimensionValues(target, dimKey) {\n    return this.getDimensions(target).then(dims => {\n      const dimCache = dims.reduce((data, item) => {\n        const values = item.value.split('=') || [];\n        const key = values[0] || item.value;\n        const value = values[1];\n\n        if (!data[key]) {\n          data[key] = []\n        }\n        data[key].push(value);\n        return data;\n      }, {});\n      return dimCache[this.getVariableValue(dimKey)] || [];\n    }).then(items => {\n      return items.map(item => ({ text: item, value: item }))\n    });\n  }\n\n  getAggregations() {\n    return this.q.when(aggregations);\n  }\n\n  /**\n   * Calls grafana backend.\n   * Retries 10 times before failure.\n   */\n  doRequest(options) {\n    let _this = this\n    return retryOrThrow(() => {\n      return _this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: options.targets\n        }\n      })\n    }, 10)\n  }\n\n  /**\n   * Converts data from grafana backend to UI format\n   */\n  mapToTextValue (result, searchField) {\n    if (_.isEmpty(result) || _.isEmpty(searchField)) {\n      return [];\n    }\n\n    var table = result.data.results[searchField].tables[0];\n    if (!table) {\n      return [];\n    }\n\n    var map = _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] }\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i }\n      }\n      return { text: row[0], value: row[0] }\n    })\n    return map;\n  }\n\n  // **************************** Template variables helpers ****************************\n\n  /**\n   * Get all template variable descriptors\n   */\n  getVariableDescriptors(regex, includeCustom = true) {\n    const vars = this.templateSrv.variables || [];\n\n    if (regex) {\n      let regexVars = vars.filter(item => item.query.match(regex) !== null);\n      if (includeCustom) {\n        const custom = vars.filter(item => item.type === 'custom' || item.type === 'constant');\n        regexVars = regexVars.concat(custom);\n      }\n      const uniqueRegexVarsMap = new Map();\n      regexVars.forEach(varObj => uniqueRegexVarsMap.set(varObj.name, varObj))\n      return Array.from(uniqueRegexVarsMap.values())\n    }\n    return vars;\n  }\n\n  /**\n   * List all variable names optionally filtered by regex or/and type\n   * Returns list of names with '$' at the beginning. Example: ['$dimensionKey', '$dimensionValue']\n   *\n   * Updates:\n   * Notes on implementation :\n   * If a custom or constant is in  variables and  includeCustom, default is false.\n   * Hence,the varDescriptors list is filtered for a unique set of var names\n  */\n  getVariables(regex, includeCustom) {\n    const varDescriptors = this.getVariableDescriptors(regex, includeCustom) || [];\n    return varDescriptors.map(item => `$${item.name}`);\n  }\n\n  /**\n   * @param varName valid varName contains '$'. Example: '$dimensionKey'\n   * Returns an array with variable values or empty array\n  */\n  getVariableValue(varName, scopedVars = {}) {\n    return this.templateSrv.replace(varName, scopedVars) || varName;\n  }\n\n  /**\n   * @param varName valid varName contains '$'. Example: '$dimensionKey'\n   * Returns true if variable with the given name is found\n  */\n  isVariable(varName) {\n    const varNames = this.getVariables() || [];\n    return !!varNames.find(item => item === varName);\n  }\n}\n"]}