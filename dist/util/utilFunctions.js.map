{"version":3,"sources":["../../src/util/utilFunctions.js"],"names":["AUTO","autoTimeIntervals","getWindowAndResolution","autoWinResConfig","timeRange","i","length","window","resolution","resolveAutoWinRes","windowSelected","resolutionSelected","timeRangeSelected","result"],"mappings":";;;;;;;;AAASA,U,cAAAA,I;AAAMC,uB,cAAAA,iB;;;wCASFC,sB,GAAyB,SAAzBA,sBAAyB,CAACC,gBAAD,EAAmBC,SAAnB,EAAiC;AACrE,YAAIC,IAAI,CAAC,CAAT;AACA,WAAG;AAAEA;AAAK,SAAV,QAAkBA,IAAIF,iBAAiBG,MAAjB,GAA0B,CAA9B,IAAmCF,YAAYD,iBAAiBE,CAAjB,EAAoB,CAApB,CAAjE;AAFqE,mCAGtCF,iBAAiBE,CAAjB,EAAoB,CAApB,CAHsC;AAAA,YAG7DE,MAH6D,wBAG7DA,MAH6D;AAAA,YAGrDC,UAHqD,wBAGrDA,UAHqD;;AAIrE,eAAO,EAAED,cAAF,EAAUC,sBAAV,EAAP;AACD,O;;;;mCASYC,iB,GAAoB,SAApBA,iBAAoB,CAACC,cAAD,EAAiBC,kBAAjB,EAAqCC,iBAArC,EAA2D;AAC1F,YAAMC,SAAS,EAAEN,QAAQG,cAAV,EAA0BF,YAAYG,kBAAtC,EAAf;AACA,YAAID,mBAAmBV,IAAnB,IAA2BW,uBAAuBX,IAAtD,EAA4D,OAAOa,MAAP;;AAF8B,oCAG3DX,uBAAuBD,iBAAvB,EAA0CW,iBAA1C,CAH2D;AAAA,YAGlFL,MAHkF,yBAGlFA,MAHkF;AAAA,YAG1EC,UAH0E,yBAG1EA,UAH0E;;AAI1F,YAAIE,mBAAmBV,IAAvB,EAA6Ba,OAAON,MAAP,GAAgBA,MAAhB;AAC7B,YAAII,uBAAuBX,IAA3B,EAAiCa,OAAOL,UAAP,GAAoBA,UAApB;AACjC,eAAOK,MAAP;AACD,O","file":"utilFunctions.js","sourcesContent":["import { AUTO, autoTimeIntervals } from '../constants'\n\n/** getWindowAndResolution\n *\n * @param autoWinResConfig is an array of Object with length always greater than 1,\n * i.e config array should contain at least 1 object\n * @param timeRange\n * @returns {{window, resolution}}\n */\nexport const getWindowAndResolution = (autoWinResConfig, timeRange) => {\n  let i = -1\n  do { i++ } while (i < autoWinResConfig.length - 1 && timeRange > autoWinResConfig[i][0])\n  const { window, resolution } = autoWinResConfig[i][1]\n  return { window, resolution }\n}\n\n/** resolveAutoWinRes\n *\n * @param windowSelected\n * @param resolutionSelected\n * @param timeRangeSelected\n * @returns {{window: *, resolution: *}}\n */\nexport const resolveAutoWinRes = (windowSelected, resolutionSelected, timeRangeSelected) => {\n  const result = { window: windowSelected, resolution: resolutionSelected }\n  if (windowSelected !== AUTO && resolutionSelected !== AUTO) return result\n  const { window, resolution } = getWindowAndResolution(autoTimeIntervals, timeRangeSelected)\n  if (windowSelected === AUTO) result.window = window\n  if (resolutionSelected === AUTO) result.resolution = resolution\n  return result\n}\n"]}