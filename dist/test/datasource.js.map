{"version":3,"sources":["../../src/datasource.js"],"names":["DEFAULT_RESOURCE_GROUP","OCIDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","tenancyOCID","jsonData","defaultRegion","environment","q","compartmentsCache","regionsCache","getRegions","getCompartments","options","query","buildQueryParameters","targets","length","when","data","doRequest","then","res","_","forEach","result","results","r","series","push","target","s","datapoints","points","tables","t","refId","queryType","region","compartment","datasourceId","range","timeRange","response","status","message","title","catch","templateMetricQuery","SELECT_PLACEHOLDERS","REGION","getVariableValue","COMPARTMENT","namespace","NAMESPACE","resourcegroup","RESOURCEGROUP","isEmpty","compartmentId","getCompartmentId","mapToTextValue","queries","filter","hide","scopedVars","metric","METRIC","dimensions","dim","key","DIMENSION_KEY","value","DIMENSION_VALUE","splitMultiValueDimensionsIntoQuieries","numberOfDaysDiff","to","diff","from","replace","AUTO","window","resolution","WINDOW","resolvedWinResolObj","reduce","d","operator","indexOf","dimension","join","aggregation","concat","multipleValueDims","startsWith","endsWith","values","slice","split","Object","keys","splitDimensions","dims","multiDims","prev","next","firstDimKey","firstDimValues","v","newDim","cloneDeep","i","j","newDimsArray","newQueries","newQuery","varString","regionQuery","match","regionsQueryRegex","Error","err","compartmentQuery","compartmentsQueryRegex","compartments","map","text","c","namespaceQuery","namespacesQueryRegex","getNamespaces","resourcegroupQuery","resourcegroupsQueryRegex","getResourceGroups","metricQuery","metricsQueryRegex","metricFindQuery","dimensionsQuery","dimensionKeysQueryRegex","getDimensionKeys","dimensionOptionsQuery","dimensionValuesQueryRegex","dimensionKey","getDimensionValues","items","compartmentFound","find","metrics","dimensionsMap","m","undefined","finally","newResult","getDimensions","dimCache","item","dimKey","aggregations","_this","datasourceRequest","method","valueOf","toString","searchField","table","rows","row","isObject","regex","includeCustom","vars","variables","regexVars","custom","uniqueRegexVarsMap","Map","set","varObj","Array","varDescriptors","getVariableDescriptors","varName","varNames","getVariables"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n** Copyright © 2019 Oracle and/or its affiliates. All rights reserved.\n** Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n*/\nimport _ from 'lodash'\nimport {\n  aggregations,\n  dimensionKeysQueryRegex,\n  namespacesQueryRegex,\n  resourcegroupsQueryRegex,\n  metricsQueryRegex,\n  regionsQueryRegex,\n  compartmentsQueryRegex,\n  dimensionValuesQueryRegex,\n  removeQuotes,\n  AUTO\n} from './constants'\nimport retryOrThrow from './util/retry'\nimport { SELECT_PLACEHOLDERS } from './query_ctrl'\nimport { resolveAutoWinRes } from './util/utilFunctions'\nconst DEFAULT_RESOURCE_GROUP = 'NoResourceGroup'\n\nexport default class OCIDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type\n    this.url = instanceSettings.url\n    this.name = instanceSettings.name\n    this.id = instanceSettings.id\n    this.tenancyOCID = instanceSettings.jsonData.tenancyOCID\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion\n    this.environment = instanceSettings.jsonData.environment\n    this.q = $q\n    this.backendSrv = backendSrv\n    this.templateSrv = templateSrv\n    this.timeSrv = timeSrv\n\n    this.compartmentsCache = [];\n    this.regionsCache = [];\n\n    this.getRegions();\n    this.getCompartments();\n  }\n\n  /**\n   * Each Grafana Data source should contain the following functions:\n   *  - query(options) //used by panels to get data\n   *  - testDatasource() //used by data source configuration page to make sure the connection is working\n   *  - annotationQuery(options) // used by dashboards to get annotations\n   *  - metricFindQuery(options) // used by query editor to get metric suggestions.\n   * More information: https://grafana.com/docs/plugins/developing/datasources/\n  */\n\n  /**\n   * Required method\n   * Used by panels to get data\n   */\n  async query(options) {\n    var query = await this.buildQueryParameters(options);\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest(query).then(result => {\n      var res = []\n      _.forEach(result.data.results, r => {\n        _.forEach(r.series, s => {\n          res.push({ target: s.name, datapoints: s.points })\n        })\n        _.forEach(r.tables, t => {\n          t.type = 'table'\n          t.refId = r.refId\n          res.push(t)\n        })\n      })\n\n      result.data = res;\n      return result;\n    })\n  }\n\n  /**\n   * Required method\n   * Used by data source configuration page to make sure the connection is working\n   */\n  testDatasource() {\n    return this.doRequest({\n      targets: [{\n        queryType: 'test',\n        region: this.defaultRegion,\n        tenancyOCID: this.tenancyOCID,\n        compartment: '',\n        environment: this.environment,\n        datasourceId: this.id\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((response) => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' }\n      }\n    }).catch(() => {\n      return { status: 'error', message: 'Data source is not working', title: 'Failure' }\n    })\n  }\n\n  /**\n   * Required method\n   * Used by query editor to get metric suggestions\n   */\n  async metricFindQuery(target) {\n    if (typeof (target) === 'string') {\n      // used in template editor for creating variables\n      return this.templateMetricQuery(target);\n    }\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    const namespace = target.namespace === SELECT_PLACEHOLDERS.NAMESPACE ? '' : this.getVariableValue(target.namespace);\n    const resourcegroup = target.resourcegroup === SELECT_PLACEHOLDERS.RESOURCEGROUP ? DEFAULT_RESOURCE_GROUP : this.getVariableValue(target.resourcegroup);\n\n    if (_.isEmpty(compartment) || _.isEmpty(namespace)) {\n      return this.q.when([]);\n    }\n\n    const compartmentId = await this.getCompartmentId(compartment);\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'search',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId,\n        namespace: namespace,\n        resourcegroup: resourcegroup\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((res) => {\n      return this.mapToTextValue(res, 'search')\n    })\n  }\n\n  /**\n   * Build and validate query parameters.\n   */\n  async buildQueryParameters (options) {\n    let queries = options.targets\n      .filter(t => !t.hide)\n      .filter(t => !_.isEmpty(this.getVariableValue(t.compartment, options.scopedVars)) && t.compartment !== SELECT_PLACEHOLDERS.COMPARTMENT)\n      .filter(t => !_.isEmpty(this.getVariableValue(t.namespace, options.scopedVars)) && t.namespace !== SELECT_PLACEHOLDERS.NAMESPACE)\n      .filter(t => !_.isEmpty(this.getVariableValue(t.resourcegroup, options.scopedVars)))\n      .filter(t => !_.isEmpty(this.getVariableValue(t.metric, options.scopedVars)) && t.metric !== SELECT_PLACEHOLDERS.METRIC || !_.isEmpty(this.getVariableValue(t.target)));\n\n    queries.forEach(t => {\n      t.dimensions = (t.dimensions || [])\n        .filter(dim => !_.isEmpty(dim.key) && dim.key !== SELECT_PLACEHOLDERS.DIMENSION_KEY)\n        .filter(dim => !_.isEmpty(dim.value) && dim.value !== SELECT_PLACEHOLDERS.DIMENSION_VALUE);\n\n      t.resourcegroup = t.resourcegroup === SELECT_PLACEHOLDERS.RESOURCEGROUP ? DEFAULT_RESOURCE_GROUP : t.resourcegroup;\n    });\n\n    // we support multiselect for dimension values, so we need to parse 1 query into multiple queries\n    queries = this.splitMultiValueDimensionsIntoQuieries(queries, options);\n\n    const results = [];\n    for (let t of queries) {\n      const region = t.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(t.region, options.scopedVars);\n      let query = this.getVariableValue(t.target, options.scopedVars);\n      const numberOfDaysDiff = this.timeSrv.timeRange().to.diff(this.timeSrv.timeRange().from, 'days')\n      // The following replaces 'auto' in window portion of the query and replaces it with an appropriate value.\n      // If there is a functionality to access the window variable instead of matching [auto] in the query, it will be\n      // better\n      if (query) query = query.replace('[auto]', `[${resolveAutoWinRes(AUTO,'',numberOfDaysDiff).window}]`)\n      let resolution = this.getVariableValue(t.resolution, options.scopedVars)\n      let window = t.window === SELECT_PLACEHOLDERS.WINDOW ? '' : this.getVariableValue(t.window,options.scopedVars)\n      // p.s : timeSrv.timeRange() results in a moment object\n      const resolvedWinResolObj = resolveAutoWinRes(window, resolution, numberOfDaysDiff)\n      window = resolvedWinResolObj.window\n      resolution = resolvedWinResolObj.resolution\n      if (_.isEmpty(query)) {\n        // construct query\n        const dimensions = (t.dimensions || []).reduce((result, dim) => {\n          const d = `${this.getVariableValue(dim.key, options.scopedVars)} ${dim.operator} \"${this.getVariableValue(dim.value, options.scopedVars)}\"`;\n          if (result.indexOf(d) < 0) {\n            result.push(d);\n          }\n          return result\n        }, [])\n        const dimension = _.isEmpty(dimensions) ? '' : `{${dimensions.join(',')}}`\n        query = `${this.getVariableValue(t.metric, options.scopedVars)}[${window}]${dimension}.${t.aggregation}`\n      }\n\n      const compartmentId = await this.getCompartmentId(this.getVariableValue(t.compartment, options.scopedVars));\n      const result = {\n        resolution,\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'query',\n        refId: t.refId,\n        hide: t.hide,\n        type: t.type || 'timeserie',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId,\n        namespace: this.getVariableValue(t.namespace, options.scopedVars),\n        resourcegroup: this.getVariableValue(t.resourcegroup, options.scopedVars),\n        query: query\n      }\n      results.push(result);\n    };\n\n    options.targets = results;\n\n    return options;\n  }\n\n  /**\n   * Splits queries with multi valued dimensions into several quiries.\n   * Example:\n   * \"DeliverySucceedEvents[1m]{resourceDisplayName = [\"ResouceName_1\",\"ResouceName_1\"], eventType = [\"Create\",\"Delete\"]}.mean()\" ->\n   *  [\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_1\", eventType = \"Create\"}.mean()\",\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_2\", eventType = \"Create\"}.mean()\",\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_1\", eventType = \"Delete\"}.mean()\",\n   *    \"DeliverySucceedEvents[1m]{resourceDisplayName = \"ResouceName_2\", eventType = \"Delete\"}.mean()\",\n   *  ]\n   */\n  splitMultiValueDimensionsIntoQuieries(queries, options) {\n    return queries.reduce((data, t) => {\n\n      if (_.isEmpty(t.dimensions) || !_.isEmpty(t.target)) {\n        // nothing to split or dimensions won't be used, query is set manually\n        return data.concat(t);\n      }\n\n      // create a map key : [values] for multiple values\n      const multipleValueDims = t.dimensions.reduce((data, dim) => {\n        const key = dim.key;\n        const value = this.getVariableValue(dim.value, options.scopedVars);\n        if (value.startsWith(\"{\") && value.endsWith(\"}\")) {\n          const values = value.slice(1, value.length - 1).split(',') || [];\n          data[key] = (data[key] || []).concat(values);\n        }\n        return data;\n      }, {});\n\n      if (_.isEmpty(Object.keys(multipleValueDims))) {\n        // no multiple values used, only single values\n        return data.concat(t);\n      }\n\n      const splitDimensions = (dims, multiDims) => {\n        let prev = [];\n        let next = [];\n\n        const firstDimKey = dims[0].key;\n        const firstDimValues = multiDims[firstDimKey] || [dims[0].value];\n        for (let v of firstDimValues) {\n          const newDim = _.cloneDeep(dims[0]);\n          newDim.value = v;\n          prev.push([newDim]);\n        }\n\n        for (let i = 1; i < dims.length; i++) {\n          const values = multiDims[dims[i].key] || [dims[i].value];\n          for (let v of values) {\n            for (let j = 0; j < prev.length; j++) {\n              if (next.length >= 20) {\n                // this algorithm of collecting multi valued dimensions is computantionally VERY expensive\n                // set the upper limit for quiries number\n                return next;\n              }\n              const newDim = _.cloneDeep(dims[i]);\n              newDim.value = v;\n              next.push(prev[j].concat(newDim));\n            }\n          }\n          prev = next;\n          next = [];\n        }\n\n        return prev;\n      }\n\n      const newDimsArray = splitDimensions(t.dimensions, multipleValueDims);\n\n      const newQueries = [];\n      for (let i = 0; i < newDimsArray.length; i++) {\n        const dims = newDimsArray[i];\n        const newQuery = _.cloneDeep(t);\n        newQuery.dimensions = dims;\n        if (i !== 0) {\n          newQuery.refId = `${newQuery.refId}${i}`;\n        }\n        newQueries.push(newQuery);\n      }\n      return data.concat(newQueries);\n    }, []);\n  }\n\n  // **************************** Template variable helpers ****************************\n\n  /**\n   * Matches the regex from creating template variables and returns options for the corresponding variable.\n   * Example:\n   * template variable with the query \"regions()\" will be matched with the regionsQueryRegex and list of available regions will be returned.\n   */\n  templateMetricQuery(varString) {\n\n    let regionQuery = varString.match(regionsQueryRegex)\n    if (regionQuery) {\n      return this.getRegions().catch(err => { throw new Error('Unable to get regions: ' + err) })\n    }\n\n    let compartmentQuery = varString.match(compartmentsQueryRegex)\n    if (compartmentQuery) {\n      return this.getCompartments().then(compartments => {\n        return compartments.map(c => ({ text: c.text, value: c.text }));\n      }).catch(err => { throw new Error('Unable to get compartments: ' + err) })\n    }\n\n    let namespaceQuery = varString.match(namespacesQueryRegex)\n    if (namespaceQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(namespaceQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(namespaceQuery[2]))\n      }\n      return this.getNamespaces(target).catch(err => { throw new Error('Unable to get namespaces: ' + err) })\n    }\n\n    let resourcegroupQuery = varString.match(resourcegroupsQueryRegex)\n    if (resourcegroupQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(resourcegroupQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(resourcegroupQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(resourcegroupQuery[3]))\n      }\n      return this.getResourceGroups(target).catch(err => { throw new Error('Unable to get resourcegroups: ' + err) })\n    }\n\n    let metricQuery = varString.match(metricsQueryRegex)\n    if (metricQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(metricQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(metricQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(metricQuery[3])),\n        resourcegroup: removeQuotes(this.getVariableValue(metricQuery[4]))\n      }\n      return this.metricFindQuery(target).catch(err => { throw new Error('Unable to get metrics: ' + err) })\n    }\n\n    let dimensionsQuery = varString.match(dimensionKeysQueryRegex)\n    if (dimensionsQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(dimensionsQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(dimensionsQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(dimensionsQuery[3])),\n        metric: removeQuotes(this.getVariableValue(dimensionsQuery[4])),\n        resourcegroup: removeQuotes(this.getVariableValue(dimensionsQuery[5]))\n      }\n      return this.getDimensionKeys(target).catch(err => { throw new Error('Unable to get dimensions: ' + err) })\n    }\n\n    let dimensionOptionsQuery = varString.match(dimensionValuesQueryRegex)\n    if (dimensionOptionsQuery) {\n      let target = {\n        region: removeQuotes(this.getVariableValue(dimensionOptionsQuery[1])),\n        compartment: removeQuotes(this.getVariableValue(dimensionOptionsQuery[2])),\n        namespace: removeQuotes(this.getVariableValue(dimensionOptionsQuery[3])),\n        metric: removeQuotes(this.getVariableValue(dimensionOptionsQuery[4])),\n        resourcegroup: removeQuotes(this.getVariableValue(dimensionOptionsQuery[6]))\n      }\n      const dimensionKey = removeQuotes(this.getVariableValue(dimensionOptionsQuery[5]));\n      return this.getDimensionValues(target, dimensionKey).catch(err => { throw new Error('Unable to get dimension options: ' + err) })\n    }\n\n    throw new Error('Unable to parse templating string');\n  }\n\n  getRegions() {\n    if (this.regionsCache && this.regionsCache.length > 0) {\n      return this.q.when(this.regionsCache);\n    }\n\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'regions'\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      this.regionsCache = this.mapToTextValue(items, 'regions');\n      return this.regionsCache;\n    });\n  }\n\n  getCompartments() {\n    if (this.compartmentsCache && this.compartmentsCache.length > 0) {\n      return this.q.when(this.compartmentsCache);\n    }\n\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'compartments',\n        region: this.defaultRegion // compartments are registered for the all regions, so no difference which region to use here\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      this.compartmentsCache = this.mapToTextValue(items, 'compartments');\n      return this.compartmentsCache;\n    });\n  }\n\n  getCompartmentId(compartment) {\n    return this.getCompartments().then(compartments => {\n      const compartmentFound = compartments.find(c => c.text === compartment || c.value === compartment);\n      return compartmentFound ? compartmentFound.value : compartment;\n    });\n  }\n\n  async getNamespaces(target) {\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    if (_.isEmpty(compartment)) {\n      return this.q.when([]);\n    }\n\n    const compartmentId = await this.getCompartmentId(compartment);\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'namespaces',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      return this.mapToTextValue(items, 'namespaces');\n    });\n  }\n\n  async getResourceGroups(target) {\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    const namespace = target.namespace === SELECT_PLACEHOLDERS.NAMESPACE ? '' : this.getVariableValue(target.namespace);\n    if (_.isEmpty(compartment)) {\n      return this.q.when([]);\n    }\n\n    const compartmentId = await this.getCompartmentId(compartment);\n    return this.doRequest({\n      targets: [{\n        environment: this.environment,\n        datasourceId: this.id,\n        tenancyOCID: this.tenancyOCID,\n        queryType: 'resourcegroups',\n        region: _.isEmpty(region) ? this.defaultRegion : region,\n        compartment: compartmentId,\n        namespace: namespace\n      }],\n      range: this.timeSrv.timeRange()\n    }).then((items) => {\n      return this.mapToTextValue(items, 'resourcegroups');\n    });\n  }\n\n  async getDimensions(target) {\n    const region = target.region === SELECT_PLACEHOLDERS.REGION ? '' : this.getVariableValue(target.region);\n    const compartment = target.compartment === SELECT_PLACEHOLDERS.COMPARTMENT ? '' : this.getVariableValue(target.compartment);\n    const namespace = target.namespace === SELECT_PLACEHOLDERS.NAMESPACE ? '' : this.getVariableValue(target.namespace);\n    const resourcegroup = target.resourcegroup === SELECT_PLACEHOLDERS.RESOURCEGROUP ? DEFAULT_RESOURCE_GROUP : this.getVariableValue(target.resourcegroup);\n    const metric = target.metric === SELECT_PLACEHOLDERS.METRIC ? '' : this.getVariableValue(target.metric);\n    const metrics = metric.startsWith(\"{\") && metric.endsWith(\"}\") ? metric.slice(1, metric.length - 1).split(',') : [metric];\n\n    if (_.isEmpty(compartment) || _.isEmpty(namespace) || _.isEmpty(metrics)) {\n      return this.q.when([]);\n    }\n\n    const dimensionsMap = {};\n    for (let m of metrics) {\n      if (dimensionsMap[m] !== undefined) {\n        continue;\n      }\n      dimensionsMap[m] = null;\n\n      const compartmentId = await this.getCompartmentId(compartment);\n      await this.doRequest({\n        targets: [{\n          environment: this.environment,\n          datasourceId: this.id,\n          tenancyOCID: this.tenancyOCID,\n          queryType: 'dimensions',\n          region: _.isEmpty(region) ? this.defaultRegion : region,\n          compartment: compartmentId,\n          namespace: namespace,\n          resourcegroup: resourcegroup,\n          metric: m\n        }],\n        range: this.timeSrv.timeRange()\n      }).then(result => {\n        const items = this.mapToTextValue(result, 'dimensions');\n        dimensionsMap[m] = [].concat(items);\n      }).finally(() => {\n        if (!dimensionsMap[m]) {\n          dimensionsMap[m] = [];\n        }\n      });\n    }\n\n    let result = [];\n    Object.values(dimensionsMap).forEach(dims => {\n      if (_.isEmpty(result)) {\n        result = dims;\n      } else {\n        const newResult = [];\n        dims.forEach(dim => {\n          if (!!result.find(d => d.value === dim.value) && !newResult.find(d => d.value === dim.value)) {\n            newResult.push(dim);\n          }\n        });\n        result = newResult;\n      }\n    })\n\n    return result;\n  }\n\n  getDimensionKeys(target) {\n    return this.getDimensions(target).then(dims => {\n      const dimCache = dims.reduce((data, item) => {\n        const values = item.value.split('=') || [];\n        const key = values[0] || item.value;\n        const value = values[1];\n\n        if (!data[key]) {\n          data[key] = []\n        }\n        data[key].push(value);\n        return data;\n      }, {});\n      return Object.keys(dimCache);\n    }).then(items => {\n      return items.map(item => ({ text: item, value: item }))\n    });\n  }\n\n  getDimensionValues(target, dimKey) {\n    return this.getDimensions(target).then(dims => {\n      const dimCache = dims.reduce((data, item) => {\n        const values = item.value.split('=') || [];\n        const key = values[0] || item.value;\n        const value = values[1];\n\n        if (!data[key]) {\n          data[key] = []\n        }\n        data[key].push(value);\n        return data;\n      }, {});\n      return dimCache[this.getVariableValue(dimKey)] || [];\n    }).then(items => {\n      return items.map(item => ({ text: item, value: item }))\n    });\n  }\n\n  getAggregations() {\n    return this.q.when(aggregations);\n  }\n\n  /**\n   * Calls grafana backend.\n   * Retries 10 times before failure.\n   */\n  doRequest(options) {\n    let _this = this\n    return retryOrThrow(() => {\n      return _this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: options.targets\n        }\n      })\n    }, 10)\n  }\n\n  /**\n   * Converts data from grafana backend to UI format\n   */\n  mapToTextValue (result, searchField) {\n    if (_.isEmpty(result) || _.isEmpty(searchField)) {\n      return [];\n    }\n\n    var table = result.data.results[searchField].tables[0];\n    if (!table) {\n      return [];\n    }\n\n    var map = _.map(table.rows, (row, i) => {\n      if (row.length > 1) {\n        return { text: row[0], value: row[1] }\n      } else if (_.isObject(row[0])) {\n        return { text: row[0], value: i }\n      }\n      return { text: row[0], value: row[0] }\n    })\n    return map;\n  }\n\n  // **************************** Template variables helpers ****************************\n\n  /**\n   * Get all template variable descriptors\n   */\n  getVariableDescriptors(regex, includeCustom = true) {\n    const vars = this.templateSrv.variables || [];\n\n    if (regex) {\n      let regexVars = vars.filter(item => item.query.match(regex) !== null);\n      if (includeCustom) {\n        const custom = vars.filter(item => item.type === 'custom' || item.type === 'constant');\n        regexVars = regexVars.concat(custom);\n      }\n      const uniqueRegexVarsMap = new Map();\n      regexVars.forEach(varObj => uniqueRegexVarsMap.set(varObj.name, varObj))\n      return Array.from(uniqueRegexVarsMap.values())\n    }\n    return vars;\n  }\n\n  /**\n   * List all variable names optionally filtered by regex or/and type\n   * Returns list of names with '$' at the beginning. Example: ['$dimensionKey', '$dimensionValue']\n   *\n   * Updates:\n   * Notes on implementation :\n   * If a custom or constant is in  variables and  includeCustom, default is false.\n   * Hence,the varDescriptors list is filtered for a unique set of var names\n  */\n  getVariables(regex, includeCustom) {\n    const varDescriptors = this.getVariableDescriptors(regex, includeCustom) || [];\n    return varDescriptors.map(item => `$${item.name}`);\n  }\n\n  /**\n   * @param varName valid varName contains '$'. Example: '$dimensionKey'\n   * Returns an array with variable values or empty array\n  */\n  getVariableValue(varName, scopedVars = {}) {\n    return this.templateSrv.replace(varName, scopedVars) || varName;\n  }\n\n  /**\n   * @param varName valid varName contains '$'. Example: '$dimensionKey'\n   * Returns true if variable with the given name is found\n  */\n  isVariable(varName) {\n    const varNames = this.getVariables() || [];\n    return !!varNames.find(item => item === varName);\n  }\n}\n"]}