{"version":3,"sources":["../../../src/util/utilFunctions.js"],"names":["getWindowAndResolution","autoWinResConfig","timeRange","i","length","window","resolution","resolveAutoWinRes","windowSelected","resolutionSelected","timeRangeSelected","result","AUTO","autoTimeIntervals"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;AAOO,IAAMA,0DAAyB,SAAzBA,sBAAyB,CAACC,gBAAD,EAAmBC,SAAnB,EAAiC;AACrE,MAAIC,IAAI,CAAC,CAAT;AACA,KAAG;AAAEA;AAAK,GAAV,QAAkBA,IAAIF,iBAAiBG,MAAjB,GAA0B,CAA9B,IAAmCF,YAAYD,iBAAiBE,CAAjB,EAAoB,CAApB,CAAjE;AAFqE,6BAGtCF,iBAAiBE,CAAjB,EAAoB,CAApB,CAHsC;AAAA,MAG7DE,MAH6D,wBAG7DA,MAH6D;AAAA,MAGrDC,UAHqD,wBAGrDA,UAHqD;;AAIrE,SAAO,EAAED,cAAF,EAAUC,sBAAV,EAAP;AACD,CALM;;AAOP;;;;;;;AAOO,IAAMC,gDAAoB,SAApBA,iBAAoB,CAACC,cAAD,EAAiBC,kBAAjB,EAAqCC,iBAArC,EAA2D;AAC1F,MAAMC,SAAS,EAAEN,QAAQG,cAAV,EAA0BF,YAAYG,kBAAtC,EAAf;AACA,MAAID,mBAAmBI,eAAnB,IAA2BH,uBAAuBG,eAAtD,EAA4D,OAAOD,MAAP;;AAF8B,8BAG3DX,uBAAuBa,4BAAvB,EAA0CH,iBAA1C,CAH2D;AAAA,MAGlFL,MAHkF,yBAGlFA,MAHkF;AAAA,MAG1EC,UAH0E,yBAG1EA,UAH0E;;AAI1F,MAAIE,mBAAmBI,eAAvB,EAA6BD,OAAON,MAAP,GAAgBA,MAAhB;AAC7B,MAAII,uBAAuBG,eAA3B,EAAiCD,OAAOL,UAAP,GAAoBA,UAApB;AACjC,SAAOK,MAAP;AACD,CAPM","file":"utilFunctions.js","sourcesContent":["import { AUTO, autoTimeIntervals } from '../constants'\n\n/** getWindowAndResolution\n *\n * @param autoWinResConfig is an array of Object with length always greater than 1,\n * i.e config array should contain at least 1 object\n * @param timeRange\n * @returns {{window, resolution}}\n */\nexport const getWindowAndResolution = (autoWinResConfig, timeRange) => {\n  let i = -1\n  do { i++ } while (i < autoWinResConfig.length - 1 && timeRange > autoWinResConfig[i][0])\n  const { window, resolution } = autoWinResConfig[i][1]\n  return { window, resolution }\n}\n\n/** resolveAutoWinRes\n *\n * @param windowSelected\n * @param resolutionSelected\n * @param timeRangeSelected\n * @returns {{window: *, resolution: *}}\n */\nexport const resolveAutoWinRes = (windowSelected, resolutionSelected, timeRangeSelected) => {\n  const result = { window: windowSelected, resolution: resolutionSelected }\n  if (windowSelected !== AUTO && resolutionSelected !== AUTO) return result\n  const { window, resolution } = getWindowAndResolution(autoTimeIntervals, timeRangeSelected)\n  if (windowSelected === AUTO) result.window = window\n  if (resolutionSelected === AUTO) result.resolution = resolution\n  return result\n}\n"]}